#!/usr/bin/env python3

import os
import sys
import curses as c
import curses.ascii as ascii

from datetime import datetime

DEBUG=1
LOGFILE="micro.log"

def _log(*args, **kwargs):
    print(*args, **kwargs)
    if 'file' in kwargs:
        file = kwargs['file']
        if not file in (sys.stdout, sys.stderr):
            del kwargs['file']
            print(*args, file=sys.stdout, **kwargs)

def log(*args, **kwargs):
    if DEBUG:
        try:
            with open(LOGFILE, "a") as f:
                _log("[{:%d%b%Y %H:%M:%S.%f}] ".format(datetime.now()), end="", file=f)
                _log(*args, file=f, **kwargs)
        except:
            pass


def dump(file):
    with open(file) as f:
        print(f.read())

class Application:
    mainScr = None
    progPath = None
    args = None

    def __init__(s, progPath, args):
        s.progPath = progPath
        s.args = args

    def __enter__(s):
        s.initCurses()
        return s

    def __exit__(s, type, value, traceback):
        s.deinitCurses()

    #TODO: Enable color support
    def initCurses(s):
        s.mainScr = c.initscr()
        c.noecho()
        c.cbreak()
        c.raw()
        s.mainScr.keypad(True)

    def deinitCurses(s):
        c.nocbreak()
        s.mainScr.keypad(False)
        c.echo()
        c.endwin()

    def showKey(s, key):
        s.mainScr.addstr('{} '.format(key))
        for c in key:
            s.mainScr.addstr('0x{:x}'.format(ord(c)))
        s.mainScr.addstr('\n')

    def handleKeystroke(s, key):
        s.showKey(key)

        if key == "^Q":
            sys.exit() #Throws SystemExit exception

    def sanitizeKey(s, key):
        if ascii.isctrl(key):
            return ascii.unctrl(key)

        return key

    def start(s):
        s.mainScr.clear()
        while True:
            key = s.mainScr.getkey()
            key = s.sanitizeKey(key)
            s.handleKeystroke(key)

def main(progPath, args):
    os.environ['ESCDELAY']='25'
    with Application(progPath, args) as app:
       app.start()


# log("START")
# main(sys.argv[0], sys.argv[1:])
# log("END")


if __name__ == '__main__':
    try:
        log("START")
        main(sys.argv[0], sys.argv[1:])
    except Exception as e:
        print("ERROR:", e, file=sys.stderr)
    except SystemExit:
        pass
    except:
        print("ERROR: Unknown error.", file=sys.stderr)
    finally:
        log("END")
